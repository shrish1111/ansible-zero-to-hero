On Machine A (the one you're connecting from):
Generate SSH key pair (if you don't already have one):


ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Press Enter to accept default path (~/.ssh/id_rsa)

Leave passphrase empty for passwordless login

Copy the public key to Machine B:


ssh-copy-id user@machineB
Replace user with the username on Machine B

Replace machineB with IP or hostname of the target machine

You’ll be prompted for the password this one time

Alternatively, manually:


cat ~/.ssh/id_rsa.pub | ssh user@machineB 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'


On Machine B:
Ensure SSH server is running and properly configured:

Config file: /etc/ssh/sshd_config

Make sure the following lines are set:

PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
  
Restart SSH service (e.g., on Ubuntu):

sudo systemctl restart ssh
Set correct permissions:

chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

  
✅ Test the Connection:
From Machine A, run:

ssh user@machineB
You should get in without a password prompt.

Below permissions are important because

chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys


SSH will refuse to use the key if the .ssh directory or authorized_keys file is too permissive.

700 means only the owner can read/write/execute the .ssh directory.

600 means only the owner can read/write the authorized_keys file.
